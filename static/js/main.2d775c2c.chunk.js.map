{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","atMainMenu","setAtMainMenu","className","onClick","questions","length","isScorePerfect","gameSource","questionText","answerOptions","map","answerOption","index","isCorrect","alert","reason","nextQuestion","handleAnswerClick","answerText","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"onHAOe,SAASA,IAAoB,IAAD,EAEIC,mBAAiB,GAFrB,mBAEnCC,EAFmC,KAElBC,EAFkB,OAmBRF,oBAAkB,GAnBV,mBAmBnCG,EAnBmC,KAmBxBC,EAnBwB,OAqBhBJ,mBAAiB,GArBD,mBAqBnCK,EArBmC,KAqB5BC,EArB4B,OA+BNN,oBAAkB,GA/BZ,mBA+BnCO,EA/BmC,KA+BvBC,EA/BuB,KAqC1C,OACC,yBAAKC,UAAU,OACbF,EACA,yBAAKE,UAAW,aACf,wBAAIA,UAAY,cAAhB,8BACA,wBAAIA,UAAY,iBAAhB,iBACA,4BAAQA,UAAY,eAAeC,QAAS,WAT/CF,GAAc,KAS4D,2CAEvE,KAEDL,EACA,yBACAM,UAAU,iBADV,cACsCJ,EADtC,WACqDM,EAAUC,OA1B3C,SAACP,GACvB,OAAIA,IAAUM,EAAUC,OA0BrBC,CAAeR,GACf,yBAAKI,UAAU,mBAAf,+BAEA,yBAAKA,UAAU,YAAf,wBAID,oCACEF,EAcA,KAbD,oCACA,yBAAKE,UAAU,oBACZ,yBAAKA,UAAU,kBACd,0CAAgBR,EAAkB,GADnC,IAC8CU,EAAUC,OACvD,qCAAWD,EAAUV,GAAiBa,aAEvC,yBAAKL,UAAU,iBAAiBE,EAAUV,GAAiBc,eACtD,yBAAKN,UAAU,kBAClBE,EAAUV,GAAiBe,cAAcC,KAAI,SAACC,EAAcC,GAAf,OAC7C,4BAAQT,QAAS,kBAhEA,SAACU,GACtBA,GACHC,MAAM,YAAcV,EAAUV,GAAiBqB,QAC/ChB,EAASD,EAAM,IAEfgB,MAAM,cAAgBV,EAAUV,GAAiBqB,QAElD,IAAMC,EAAetB,EAAkB,EACnCsB,EAAeZ,EAAUC,OAC5BV,EAAmBqB,GAEnBnB,GAAa,GAqDiBoB,CAAkBN,EAAaE,aAAaF,EAAaO,mBCtE1FC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC7B,EAAD,OAEF8B,SAASC,eAAe,W","file":"static/js/main.2d775c2c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport questions from './assets/questions.json';\r\n\r\nexport function RenderQuestion(): JSX.Element {\r\n\treturn <div>{questions[0].answerOptions}</div>\r\n}\r\n\r\nexport default function App(): JSX.Element {\r\n\r\n\tconst [currentQuestion, setCurrentQuestion] = useState<number>(0);\r\n\r\n\tconst handleAnswerClick = (isCorrect: boolean) => {\r\n\t\tif (isCorrect) {\r\n\t\t\talert(\"Correct! \" + questions[currentQuestion].reason)\r\n\t\t\tsetScore(score+1);\r\n\t\t} else {\r\n\t\t\talert(\"Incorrect! \" + questions[currentQuestion].reason)\r\n\t\t}\r\n\t\tconst nextQuestion = currentQuestion + 1;\r\n\t\tif (nextQuestion < questions.length) {\r\n\t\t\tsetCurrentQuestion(nextQuestion);\r\n\t\t} else {\r\n\t\t\tsetShowScore(true);\r\n\t\t}\r\n\t}\r\n\r\n\tconst [showScore, setShowScore] = useState<boolean>(false);\r\n\r\n\tconst [score, setScore] = useState<number>(0);\r\n\r\n\tconst isScorePerfect = (score: number) => {\r\n\t\tif (score === questions.length) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tconst [atMainMenu, setAtMainMenu] = useState<boolean>(true)\r\n\r\n\tconst handleStartClick = () => {\r\n\t\tsetAtMainMenu(false)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='app'>\r\n\t\t\t{atMainMenu ?\r\n\t\t\t\t<div className= 'main-menu'>\r\n\t\t\t\t\t<h1 className = 'title-text'>Riyara's Video Game Trivia</h1>\r\n\t\t\t\t\t<h2 className = 'subtitle-text'>CISC275 F2021</h2>\r\n\t\t\t\t\t<button className = 'start-button' onClick={() => handleStartClick()}>{<strong>Start</strong>}</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t:null \r\n\t\t\t}\r\n\t\t\t{showScore ? (\r\n\t\t\t\t<div \r\n\t\t\t\tclassName='score-section'>You scored {score} out of {questions.length}\r\n\t\t\t\t{isScorePerfect(score) ? (\r\n\t\t\t\t\t<div className='congratulations'>A perfect score! Great job!</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<div className='good-try'>Thanks for playing!</div>\r\n\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t{!atMainMenu ?\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t<div className='question-section'>\r\n\t\t\t\t\t\t\t\t<div className='question-count'>\r\n\t\t\t\t\t\t\t\t\t<span>Question {currentQuestion + 1}</span>/{questions.length}\r\n\t\t\t\t\t\t\t\t\t<h3>Game: {questions[currentQuestion].gameSource}</h3>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className='question-text'>{questions[currentQuestion].questionText}</div>\r\n\t\t\t\t\t\t\t</div><div className='answer-section'>\r\n\t\t\t\t\t\t\t\t\t{questions[currentQuestion].answerOptions.map((answerOption, index) => (\r\n\t\t\t\t\t\t\t\t\t\t<button onClick={() => handleAnswerClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t:null\r\n\t\t\t\t\t}\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}